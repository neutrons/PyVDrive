# Goal:  Regroup detectors by L2 for each panel (3 west, 3 east, 1 high angle).  Normalize by detector efficiency and number of detectors

# vanadium
Load(Filename='/SNS/VULCAN/IPTS-21356/nexus/VULCAN_161350.nxs.h5', OutputWorkspace='long_van')
LoadDiffCal(InputWorkspace='long_van', Filename='/SNS/users/wzz/Projects/VULCAN/PoleFigure/vulcan_calib_l2.h5',
            WorkspaceName='pole_figure')
# mask out the bad pixels
LoadMask(Instrument='vulcan',
        InputFile='/SNS/users/wzz/Projects/VULCAN/PoleFigure/vulcan_mask_highangle_bad.xml',
        RefWorkspace='long_van', OutputWorkspace='highanglemask')
MaskDetectors(Workspace='long_van', MaskedWorkspace='highanglemask', ForceInstrumentMasking=True)
# align detectors
AlignDetectors(InputWorkspace='long_van', OutputWorkspace='long_van', CalibrationWorkspace='pole_figure_cal')
# convert back to TOF and rebin
ConvertUnits(InputWorkspace='long_van', OutputWorkspace='long_van', Target='TOF')
Rebin(InputWorkspace='long_van', OutputWorkspace='long_van', Params='5000,-0.001,60000')
# convert to Workspace2D in order to apply efficiency factor
ConvertToMatrixWorkspace(InputWorkspace='long_van', OutputWorkspace='long_van_matrix')
# eff_ws is generated by script import_efficiency.py
Multiply(LHSWorkspace='long_van_matrix', RHSWorkspace='eff_ws', OutputWorkspace='log_van_eff_calib')

# go through efficiency workspace, group workspace and matrix workspace to find out the number
# of detector in each group
eff_ws = mtd['eff_ws']
group_ws = mtd['pole_figure_group']
matrix_ws = mtd['log_van_eff_calib']
num_used_det_dict = dict()
for iws in range(group_ws.getNumberHistograms()):
    eff_factor = eff_ws.readY(iws)[0]
    group_number = int(group_ws.readY(iws)[0])
    det_used = int(eff_factor >= 1.0 and (not matrix_ws.isMasked(iws)))
    if group_number not in num_used_det_dict:
        num_used_det_dict[group_number] = 0
    num_used_det_dict[group_number] += det_used
print num_used_det_dict

# group detectors
GroupDetectors(InputWorkspace='log_van_eff_calib', OutputWorkspace='long_van_tof_eff_calib',
               CopyGroupingFromWorkspace='pole_figure_group')



# normalize by number of detectors
norm_long_van = CloneWorkspace(InputWorkspace='long_van_tof_eff_calib', OutputWorkspace='norm_long_van')
for iws in range(norm_long_van.getNumberHistograms()):
    num_det = norm_long_van.getSpectrum(iws).getDetectorIDs().size()
    for iy in range(len(norm_long_van.dataY(iws))):
        norm_long_van.dataY(iws)[iy] /= num_used_det_dict[iws+1]  # num_det

# FINAL OUTPUT: long_van_tof_eff_calib
